import { z } from 'zod';

// Ingredient schema
const ingredientSchema = z.object({
  name: z.string().min(1, 'Ingredient name is required'),
  amount: z.string().optional(),
});

// Nutritional value schema
const nutritionalValueSchema = z.object({
  kcal: z.number().int().nonnegative('Calories must be a positive number'),
  carbs: z.number().int().nonnegative('Carbs must be a positive number'),
  fat: z.number().int().nonnegative('Fat must be a positive number'),
  protein: z.number().int().nonnegative('Protein must be a positive number'),
});

// Source schema
const sourceSchema = z.object({
  name: z.string().min(1, 'Source name is required'),
  url: z.string().url('Please provide a valid URL'),
});

// Main recipe schema
export const insertRecipeSchema = z.object({
  name: z.string().min(3, 'Name must be at least 3 characters'),
  // No need to include slug since it's autogenerated
  category: z.string().optional(), // Has default in database
  images: z.array(z.string()).optional().default([]),
  servings: z.number().int().positive().optional(),
  handsOnTime: z.number().int().nonnegative().optional(),
  handsOffTime: z.number().int().nonnegative().optional(),
  instructions: z.array(z.string()).optional().default([]),
  notes: z.string().optional(),
  
  // Related entities
  ingredients: z.array(ingredientSchema).optional().default([]),
  nutritionalValue: nutritionalValueSchema.optional(),
  source: sourceSchema.optional(),
});

export type InsertRecipeInput = z.infer<typeof insertRecipeSchema>;